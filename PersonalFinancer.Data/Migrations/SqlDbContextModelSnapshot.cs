// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PersonalFinancer.Data;

#nullable disable

namespace PersonalFinancer.Data.Migrations
{
    [DbContext(typeof(SqlDbContext))]
    partial class SqlDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PersonalFinancer.Data.Models.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CurrencyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("PersonalFinancer.Data.Models.AccountType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("AccountTypes");

                    b.HasData(
                        new
                        {
                            Id = "f4c3803a-7ed5-4d78-9038-7b21bf08a040",
                            IsDeleted = false,
                            Name = "Cash",
                            OwnerId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e"
                        },
                        new
                        {
                            Id = "1dfe1780-daed-4198-8360-378aa33c5411",
                            IsDeleted = false,
                            Name = "Bank",
                            OwnerId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e"
                        },
                        new
                        {
                            Id = "daef2351-e2e9-43b9-b908-8d7d00bf3df6",
                            IsDeleted = false,
                            Name = "Savings",
                            OwnerId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e"
                        },
                        new
                        {
                            Id = "42e54cf1-dc38-474a-814d-abdd97ec332e",
                            IsDeleted = false,
                            Name = "Cash Money",
                            OwnerId = "bcb4f072-ecca-43c9-ab26-c060c6f364e4"
                        },
                        new
                        {
                            Id = "cea9346d-bcf4-41aa-aa11-5ddb0b7e6a61",
                            IsDeleted = false,
                            Name = "Bank Money",
                            OwnerId = "bcb4f072-ecca-43c9-ab26-c060c6f364e4"
                        });
                });

            modelBuilder.Entity("PersonalFinancer.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4ccd49a4-02b1-410f-871f-d8f6f4cb7b92",
                            Email = "petar@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Petar",
                            LastName = "Petrov",
                            LockoutEnabled = false,
                            NormalizedEmail = "PETAR@MAIL.COM",
                            NormalizedUserName = "PETAR@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENLI/KO6bpBuEzI5vjuhBC9iNRSddqorQfq421fS3Q3SNu0vIg/UILuW1X7WieuWdA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fcd4ab59-a6ed-456f-8e3e-d256600b90e5",
                            TwoFactorEnabled = false,
                            UserName = "petar@mail.com"
                        },
                        new
                        {
                            Id = "bcb4f072-ecca-43c9-ab26-c060c6f364e4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6c6707c4-e7ea-4222-9eb6-6bd830cd831f",
                            Email = "teodor@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Teodor",
                            LastName = "Lesly",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEODOR@MAIL.COM",
                            NormalizedUserName = "TEODOR@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEE7LZzIGTn6eV361Hf9SfKW21mdSlVzAmQo8uOapIK1jEFry/Sl4l3FWyXDpL11BRA==",
                            PhoneNumber = "1325476980",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ad90f9b8-3617-4db8-a2b3-e73e5b17c218",
                            TwoFactorEnabled = false,
                            UserName = "teodor@mail.com"
                        },
                        new
                        {
                            Id = "f86bf7a1-c0b4-432e-83e4-ccaaf2ebb8ab",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2be0fdf3-aa32-4512-a3fa-501d94891c48",
                            Email = "user3@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User3",
                            LastName = "Userov3",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@MAIL.COM",
                            NormalizedUserName = "USER3@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENO7Sht3f4n/AFCDyIt+johJ+DfX/oPHUKL5jCC7vu/vWTq8fVepjNXLzqIRe6Hp7w==",
                            PhoneNumber = "132547693",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d13d8452-b0b8-4252-9793-1ca15481cfda",
                            TwoFactorEnabled = false,
                            UserName = "user3@mail.com"
                        },
                        new
                        {
                            Id = "d75dbfb1-b1e9-4599-8267-d169c29a1356",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "24509da9-4db3-4a50-ac5c-a04fb9d89602",
                            Email = "user4@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User4",
                            LastName = "Userov4",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@MAIL.COM",
                            NormalizedUserName = "USER4@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELR3rVO2WumNwu7MxwMunh6KTdSRW6m5DDAns8IEHYzgRgMEmCzah4Iajk2uqiQZTw==",
                            PhoneNumber = "132547694",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a9ce9d32-4b3e-489c-bab5-ff44899bfc1d",
                            TwoFactorEnabled = false,
                            UserName = "user4@mail.com"
                        },
                        new
                        {
                            Id = "87c9de28-42f0-44b6-9108-ff069989d744",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c476750b-4d16-49d5-ae42-cd70d0071bcd",
                            Email = "user5@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User5",
                            LastName = "Userov5",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@MAIL.COM",
                            NormalizedUserName = "USER5@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEM3xEutqOtxQESh5UQv5+rREzGyckgvlc8NHJleTVIq/H+KB/qNlO26DIA4ujzPDCA==",
                            PhoneNumber = "132547695",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9c8f78b4-b750-458f-b605-720783113c6e",
                            TwoFactorEnabled = false,
                            UserName = "user5@mail.com"
                        },
                        new
                        {
                            Id = "71b67705-e8d3-4862-9ad2-b76ac7ef92b0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "82c4eb33-b259-49d4-9bdb-d2dc0817cd3c",
                            Email = "user6@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User6",
                            LastName = "Userov6",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER6@MAIL.COM",
                            NormalizedUserName = "USER6@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEADzquUUChMv5injYmNo+ob9CuzMwjXr22GQIFrWnSKDPYLT/ZUGM8ReXjzD1ncCrA==",
                            PhoneNumber = "132547696",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "abe84cd8-c1ef-4479-b99d-93416e8e2178",
                            TwoFactorEnabled = false,
                            UserName = "user6@mail.com"
                        },
                        new
                        {
                            Id = "94190cf7-20a0-4c82-a6d2-ceebf165e0f0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "65abda39-399c-47fe-82de-de9977030ae6",
                            Email = "user7@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User7",
                            LastName = "Userov7",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER7@MAIL.COM",
                            NormalizedUserName = "USER7@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEM2BRqxReiC++NigAupvbejLkMdceatr2o0sF8tFUFDgA1xbx6zzPgGVh59vBpBPmQ==",
                            PhoneNumber = "132547697",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b9d7b2e1-dcfa-4457-bc4b-a6475f099c06",
                            TwoFactorEnabled = false,
                            UserName = "user7@mail.com"
                        },
                        new
                        {
                            Id = "a613ace1-0af7-4ec7-b663-cb4b9fd19e51",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "46ce3012-1a0d-41c8-a205-50bb91a360be",
                            Email = "user8@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User8",
                            LastName = "Userov8",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER8@MAIL.COM",
                            NormalizedUserName = "USER8@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENG/kCTyVIYkuJhJ+tXE6siQ+UDkrbAKqgppdo0OYDVgtQ6bMVfh6tHYUx8ngv2cdg==",
                            PhoneNumber = "132547698",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7c9faaf5-f389-4b4e-8637-1514a08bbb5e",
                            TwoFactorEnabled = false,
                            UserName = "user8@mail.com"
                        },
                        new
                        {
                            Id = "c179a9af-914d-45db-ac99-ac1e4fa1a81e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a527089-80bb-44f7-aead-8e7131c46ce8",
                            Email = "user9@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User9",
                            LastName = "Userov9",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER9@MAIL.COM",
                            NormalizedUserName = "USER9@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEB1ayeIjavs/CLXkglkiiRBCXAGXkCqp24XgKDZ9zmEyyOxWFt0F8TMYLwK/FrmWDQ==",
                            PhoneNumber = "132547699",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d7358981-6ba0-4632-a6e5-a41d9a740330",
                            TwoFactorEnabled = false,
                            UserName = "user9@mail.com"
                        },
                        new
                        {
                            Id = "8622144f-8888-4a4b-a7ef-bc4c71026f85",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "397f3d28-d4b2-4d9c-ad25-e891c040ee5a",
                            Email = "user10@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User10",
                            LastName = "Userov10",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER10@MAIL.COM",
                            NormalizedUserName = "USER10@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAaDGnTC0Hh/eYOZbzISIIodJ/lXruSRyOXUlYoL/MP38uYAeEb2nrdxrQ+2fOJydA==",
                            PhoneNumber = "1325476910",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "92a8c587-8c0a-4427-baf7-02fc0c29213c",
                            TwoFactorEnabled = false,
                            UserName = "user10@mail.com"
                        },
                        new
                        {
                            Id = "47af2a07-4a22-444e-bc1c-b4f7e37e09f7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5c082d16-5a64-4d7d-a839-0bc9f8de7e42",
                            Email = "user11@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User11",
                            LastName = "Userov11",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER11@MAIL.COM",
                            NormalizedUserName = "USER11@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGLHkQohO//1fv5fMH5U3yKyvxBiW4BuNNrlazwzamJMHyypit3sGZwOoTUyVVraKw==",
                            PhoneNumber = "1325476911",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "21cd09f9-64c4-4c44-9c5c-e39a7aeacb72",
                            TwoFactorEnabled = false,
                            UserName = "user11@mail.com"
                        },
                        new
                        {
                            Id = "a9573f5f-ffd5-4755-9e4b-f36d3325d14c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dc3a5e51-7dec-4843-a2dc-98e25b6afb57",
                            Email = "user12@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User12",
                            LastName = "Userov12",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER12@MAIL.COM",
                            NormalizedUserName = "USER12@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOI9r9hHEvxz9rn9zQnqMAAAgu8qBaY0KbigFEhsklb9IPzXfBo++P8Yn65/WLfQJg==",
                            PhoneNumber = "1325476912",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9e764b77-3832-4183-aa86-06d6af3e23af",
                            TwoFactorEnabled = false,
                            UserName = "user12@mail.com"
                        },
                        new
                        {
                            Id = "9b69aa77-5f40-4ef8-87be-9eb3d53f6bc7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1e0cdd73-8a79-466b-9b62-e49b664d9272",
                            Email = "user13@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User13",
                            LastName = "Userov13",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER13@MAIL.COM",
                            NormalizedUserName = "USER13@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEK8pZaBahtagPe5FfmUJ3yeTPvyaar5S/x9OhSrw1sPKQBxe78SE8nt/7X02oEICA==",
                            PhoneNumber = "1325476913",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2f4ebcf4-3cfa-4d83-a775-ccdd82c25238",
                            TwoFactorEnabled = false,
                            UserName = "user13@mail.com"
                        },
                        new
                        {
                            Id = "dea12856-c198-4129-b3f3-b893d8395082",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e03d247e-de84-4c96-acfc-a5c543c944a3",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            FirstName = "Great",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELG0xnD1pq64QMb9ItDNiPeWe+SdNHDdpxWAYMUaGoTgPNXYbqZjiPOmLypAz+iO/g==",
                            PhoneNumber = "9876543021",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5c7ba207-a12c-44a8-b1b2-9ba375b5e162",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("PersonalFinancer.Data.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "e241b89f-b094-4f79-bb09-efc6f47c2cb3",
                            IsDeleted = false,
                            Name = "Initial Balance",
                            OwnerId = "dea12856-c198-4129-b3f3-b893d8395082"
                        },
                        new
                        {
                            Id = "93cebd34-a9f5-4862-a8c9-3b6eea63e94c",
                            IsDeleted = false,
                            Name = "Food & Drink",
                            OwnerId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e"
                        },
                        new
                        {
                            Id = "d59cbb57-3b9e-4b37-9b74-a375eecba8c8",
                            IsDeleted = false,
                            Name = "Utilities",
                            OwnerId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e"
                        },
                        new
                        {
                            Id = "b58a7947-eecf-40d0-b84e-c6947fcbfd86",
                            IsDeleted = false,
                            Name = "Transport",
                            OwnerId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e"
                        },
                        new
                        {
                            Id = "96e441e3-c5a6-427f-bb32-85940242d9ee",
                            IsDeleted = false,
                            Name = "Medical & Healthcare",
                            OwnerId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e"
                        },
                        new
                        {
                            Id = "081a7be8-15c4-426e-872c-dfaf805e3fec",
                            IsDeleted = false,
                            Name = "Salary",
                            OwnerId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e"
                        },
                        new
                        {
                            Id = "e03634d5-1970-4e01-8568-42756e9ad973",
                            IsDeleted = false,
                            Name = "Money Transfer",
                            OwnerId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e"
                        },
                        new
                        {
                            Id = "459dc945-0d2c-4a07-a2aa-55b4c5e57f9f",
                            IsDeleted = false,
                            Name = "Dividents",
                            OwnerId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e"
                        });
                });

            modelBuilder.Entity("PersonalFinancer.Data.Models.Currency", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = "3bf454ad-941b-4ab6-a1ad-c212bfc46e7d",
                            IsDeleted = false,
                            Name = "BGN",
                            OwnerId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e"
                        },
                        new
                        {
                            Id = "dab2761d-acb1-43bc-b56b-0d9c241c8882",
                            IsDeleted = false,
                            Name = "EUR",
                            OwnerId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e"
                        },
                        new
                        {
                            Id = "2f2c29e5-4463-4d5d-bfd2-e0f973c24e8f",
                            IsDeleted = false,
                            Name = "USD",
                            OwnerId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e"
                        },
                        new
                        {
                            Id = "c7edb668-a98e-4bc9-800c-fffbe9747d02",
                            IsDeleted = false,
                            Name = "SEK",
                            OwnerId = "bcb4f072-ecca-43c9-ab26-c060c6f364e4"
                        },
                        new
                        {
                            Id = "8370adf0-ef14-465d-8394-215014aaf7c4",
                            IsDeleted = false,
                            Name = "GBP",
                            OwnerId = "bcb4f072-ecca-43c9-ab26-c060c6f364e4"
                        });
                });

            modelBuilder.Entity("PersonalFinancer.Data.Models.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsInitialBalance")
                        .HasColumnType("bit");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Refference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PersonalFinancer.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PersonalFinancer.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonalFinancer.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PersonalFinancer.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonalFinancer.Data.Models.Account", b =>
                {
                    b.HasOne("PersonalFinancer.Data.Models.AccountType", "AccountType")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PersonalFinancer.Data.Models.Currency", "Currency")
                        .WithMany("Accounts")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PersonalFinancer.Data.Models.ApplicationUser", "Owner")
                        .WithMany("Accounts")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountType");

                    b.Navigation("Currency");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("PersonalFinancer.Data.Models.AccountType", b =>
                {
                    b.HasOne("PersonalFinancer.Data.Models.ApplicationUser", "Owner")
                        .WithMany("AccountTypes")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("PersonalFinancer.Data.Models.Category", b =>
                {
                    b.HasOne("PersonalFinancer.Data.Models.ApplicationUser", "Owner")
                        .WithMany("Categories")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("PersonalFinancer.Data.Models.Currency", b =>
                {
                    b.HasOne("PersonalFinancer.Data.Models.ApplicationUser", "Owner")
                        .WithMany("Currencies")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("PersonalFinancer.Data.Models.Transaction", b =>
                {
                    b.HasOne("PersonalFinancer.Data.Models.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonalFinancer.Data.Models.Category", "Category")
                        .WithMany("Transactions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PersonalFinancer.Data.Models.ApplicationUser", "Owner")
                        .WithMany("Transactions")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Category");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("PersonalFinancer.Data.Models.Account", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("PersonalFinancer.Data.Models.AccountType", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("PersonalFinancer.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("AccountTypes");

                    b.Navigation("Accounts");

                    b.Navigation("Categories");

                    b.Navigation("Currencies");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("PersonalFinancer.Data.Models.Category", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("PersonalFinancer.Data.Models.Currency", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
