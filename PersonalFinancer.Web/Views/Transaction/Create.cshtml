@using PersonalFinancer.Web.Infrastructure;
@using static PersonalFinancer.Data.DataConstants.Host;
@model TransactionFormModel
@{
	ViewData["Title"] = "Create Transaction";
}

@if (Model.Accounts.Any())
{
	<p class="display-6 text-center">@ViewData["Title"]</p>
	<div class="row">
		<div class="offset-md-4 col-md-4">
			<section>
				<form method="post">
					<div asp-validation-summary="ModelOnly" class="text-danger"></div>
					<div class="form-floating formField">
						<input asp-for="@Model.Amount" class="form-control form-control-lg" type="text" placeholder=".form-control-lg" />
						<label asp-for="@Model.Amount" class="form-label"></label>
						<span asp-validation-for="@Model.Amount" class="text-danger"></span>
					</div>
					<div class="form-floating formField">
						<input asp-for="@Model.CreatedOn" type="text" class="form-control form-control-lg datepicker" placeholder=".form-control-lg">
						<label asp-for="@Model.CreatedOn" class="form-label"></label>
						<span asp-validation-for="@Model.CreatedOn" class="text-danger"></span>
					</div>
					<div class="dropdown-menu position-static d-grid gap-1 p-2 rounded-3 mx-0 formField" id="categoriesSelection">
						<label asp-for="@Model.CategoryId" class="form-label"></label>
						<select asp-for="@Model.CategoryId" class="form-select" onchange="deleteBtnController()" id="categoriesField">
							@foreach (var category in @Model.Categories)
							{
								<option value="@category.Id" id="@category.Id" userId="@(category.UserId ?? "notOwnedCategory")">@category.Name</option>
							}
						</select>
						<div id="newCategoryDiv" class="form-floating formField" style="display: none;">
							<input id="newCategoryField" class="form-control form-control-lg" type="text" placeholder=".form-control-lg">
							<label class="form-label">Write New Category's name...</label>
							<p id="errorMsg" style="color: red;"></p>
						</div>
						<a class="btn btn-primary" onclick="createCategory()">Create New Category</a>
						<a class="btn btn-danger" onclick="deleteCategory()" style="display: none;" id="deleteBtn">Delete This Category</a>
					</div>
					<div class="dropdown-menu position-static d-grid gap-1 p-2 rounded-3 mx-0 formField">
						<label asp-for="@Model.AccountId" class="form-label"></label>
						<select asp-for="@Model.AccountId" class="form-select">
							@foreach (var account in @Model.Accounts)
							{
								<option value="@account.Id">@account.Name</option>
							}
						</select>
					</div>
					<div class="dropdown-menu position-static d-grid gap-1 p-2 rounded-3 mx-0 formField">
						<label asp-for="@Model.TransactionType" class="form-label"></label>
						<select asp-for="@Model.TransactionType" class="form-select">
							<option value="@TransactionType.Income">@TransactionType.Income</option>
							<option value="@TransactionType.Expense">@TransactionType.Expense</option>
						</select>
					</div>
					<div class="form-floating formField">
						<input type="text" asp-for="@Model.Refference" class="form-control form-control-lg" placeholder=".form-control-lg" />
						<label asp-for="@Model.Refference" class="form-lebel"></label>
						<span asp-validation-for="@Model.Refference" class="text-danger"></span>
					</div>
					<div>
						<button type="submit" class="w-100 btn btn-lg btn-success">Create</button>
					</div>
				</form>
			</section>
		</div>
	</div>
}
else
{
	<div class="text-center">
		<p class="display-4">You do not have any created account.</p>
		<p class="display-6"><a asp-controller="Account" asp-action="Create">Create</a> your first account before start record your transactions.</p>
	</div>
}

@section Scripts {
	<partial name="_ValidationScriptsPartial" />
	<partial name="_DatePickerScriptPartial" />

	<script>
		const categoriesDropdown = document.getElementById('categoriesField');
		const deleteBtn = document.getElementById('deleteBtn');

		async function createCategory() {
			let newCategoryDiv = document.getElementById('newCategoryDiv');

			if (newCategoryDiv.style.display == 'none') {
				newCategoryDiv.style.display = 'block';
			} else {
				let inputField = document.getElementById('newCategoryField');

				let response = await fetch('@ApiCategoriesUrl', {
					method: 'POST',
					headers: {
						'Accept': 'application/json',
						'Content-Type': 'application/json'
					},
					body: JSON.stringify(inputField.value)
				});

				if (response.status == 201) {
					let newCategory = await response.json();

					let optionTag = document.createElement('option');
					optionTag.value = newCategory.id;
					optionTag.setAttribute("userId", newCategory.userId);
					optionTag.setAttribute("id", newCategory.id);
					optionTag.textContent = newCategory.name;

					categoriesDropdown.appendChild(optionTag);
					categoriesDropdown.value = newCategory.id;

					newCategoryDiv.style.display = 'none';
					inputField.value = '';
					deleteBtn.style.display = 'block';
				} else if (response.status == 400) {
					let error = await response.json();
					document.getElementById('errorMsg').textContent = error;
				}
			}
		}

		function deleteBtnController() {
			let categoryOwnerId = categoriesDropdown.selectedOptions[0].attributes['userid'].value;

			if (categoryOwnerId != 'notOwnedCategory' && categoryOwnerId == "@User.Id()") {
				deleteBtn.style.display = 'block';
			} else {
				deleteBtn.style.display = 'none';
			}
		}

		deleteBtnController();

		async function deleteCategory() {
			let categoryId = categoriesDropdown.value;
			let categoryOwnerId = categoriesDropdown.selectedOptions[0].attributes['userid'].value;

			if (categoryOwnerId == 'notOwnedCategory' || categoryOwnerId != "@User.Id()") {
				return alert("You can not delete this category!")
			}

			let url = '@(ApiCategoriesUrl)' + categoryId;

			let response = await fetch(url, { method: 'DELETE' });

			if (response.status == 204) {
				categoriesDropdown.removeChild(document.getElementById(categoryId));
				deleteBtnController();
			} else {
				alert('Somethink happend!')
			}
		}
	</script>
}